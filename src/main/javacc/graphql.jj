/*
 * Copyright (c) 2016, Christoph Engelbert (aka noctarius) and
 * contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
options {
    STATIC=false;
    CHOICE_AMBIGUITY_CHECK=3;
    OTHER_AMBIGUITY_CHECK=3;
    JAVA_UNICODE_ESCAPE=false;
    UNICODE_INPUT=true;
    FORCE_LA_CHECK=true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC=false;

    BUILD_PARSER=true;
    BUILD_TOKEN_MANAGER=true;

    DEBUG_PARSER=false;
    DEBUG_TOKEN_MANAGER=false;
    DEBUG_LOOKAHEAD=false;
}
PARSER_BEGIN(GraphQLParser)
package com.noctarius.graphquul.impl;

import java.io.*;
import com.noctarius.graphquul.ast.*;
import com.noctarius.graphquul.visitor.*;

class GraphQLParser {
    private StreamingVisitor visitor;
    private int tokenId = 0;

    private GraphQLParser(Reader reader, StreamingVisitor visitor) {
        this(reader);
        this.visitor = visitor;
    }

    static void parse(String query, StreamingVisitor visitor) throws ParseException, TokenMgrError {
        new GraphQLParser(new StringReader(query), visitor).Document();
    }

    private int line() {
        return token_source.input_stream.getBeginLine();
    }

    private int column() {
        return token_source.input_stream.getBeginColumn();
    }

    private int tokenId() {
        return tokenId++;
    }
}
PARSER_END(GraphQLParser)

TOKEN: {
      < COMMA                   : "," >
    | < HASH                    : "#" >
    | < BANG                    : "!" >
    | < DOLLAR                  : "$" >
    | < OPAR                    : "(" >
    | < CPAR                    : ")" >
    | < ELLIPSIS                : "..." >
    | < COLON                   : ":" >
    | < EQ                      : "=" >
    | < AT                      : "@" >
    | < OBRA                    : "[" >
    | < CBRA                    : "]" >
    | < OCBR                    : "{" >
    | < PIPE                    : "|" >
    | < CCBR                    : "}" >
    | < PLUS                    : "+" >
    | < MINUS                   : "-" >
    | < SIGN                    : <PLUS> | <MINUS> >
}

TOKEN: {
      < FRAGMENT                : "fragment" >
    | < QUERY                   : "query" >
    | < MUTATION                : "mutation" >
    | < SCHEMA                  : "schema" >
    | < SCALAR                  : "scalar" >
    | < TYPE                    : "type" >
    | < INTERFACE               : "interface" >
    | < IMPLEMENTS              : "implements" >
    | < ENUM                    : "enum" >
    | < UNION                   : "union" >
    | < INPUT                   : "input" >
    | < EXTEND                  : "extend" >
    | < DIRECTIVE               : "directive" >

    | < TRUE                    : "true" >
    | < FALSE                   : "false" >
    | < NULL                    : "null" >
    | < ON                      : "on" >
}

TOKEN: {
      < DIGIT                   : [ "0"-"9" ] >
    | < NON_ZERO_DIGIT          : [ "1"-"9" ] >
}

SKIP: {
      "\t"
    | "\u0020"
    | "\ufeff" // Unicode BOM
    | < SKIP_NEW_LINE            : <LINE_TERMINATOR> >
    | < SKIP_INSIGN_COMMA        : <COMMA> >
    | < SKIP_COMMENT             : <HASH> (~["\n", "\r", "\u2028", "\u2029"])* >
}

TOKEN: {
      < #LINE_TERMINATOR        : ( ["\n", "\r", "\u2028", "\u2029"] ) >
    | < #WHITESPACE             : ["\t", "\u000b", "\f", "\u0020", "\u00a0"] >
    | < #LETTER                 : ["\t", "\r", "\n", "\u0020"-"\uffff"] >
    | < #EXPONENT_IDENFITIER    : "e" | "E" >
    | < #INTEGER_PART           : "0" | <NON_ZERO_DIGIT> (<DIGIT>)* >
    | < #FRACTIONAL_PART        : "." (<DIGIT>)* >
    | < #EXPONENT_PART          : <EXPONENT_IDENFITIER> (<SIGN>)? (<DIGIT>)+ >
    | < INTEGER_LITERAL         : (<MINUS>)? <INTEGER_PART> >
    | < FLOAT_LITERAL           : (<MINUS>)?
                                  (
                                      <INTEGER_PART> <FRACTIONAL_PART>
                                    | <INTEGER_PART> <EXPONENT_PART>
                                    | <INTEGER_PART> <FRACTIONAL_PART> <EXPONENT_PART>
                                  ) >
    | < STRING_LITERAL          : "\""
                                  (
                                        ~["\"", "\\", "\u2028", "\u2029"]
                                      | "\\u" ( ["0"-"9"] | ["A"-"F"] | ["a"-"f"] ){4} // Escaped Unicode
                                      | "\\" ( "\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" ) // Escaped Character
                                      | (<LETTER>)+
                                  )*
                                  "\"" >
    | < NAME_LITERAL            : ( "_" | ["A"-"Z"] | ["a"-"z"] ) ( "_" | ["0"-"9"] | ["A"-"Z"] | ["a"-"z"] )* >
}




// Document structure
void Document(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitDocument(line, column, tokenId);
}
{
    (Definition())+ {
        visitor.endDocument(tokenId);
    }
}

void Definition(): {}
{
      OperationDefinition() |
      FragmentDefinition() |
      TypeSystemDefinition()
}

void OperationDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token operationType;
    Token name = null;
}
{
    (
        ({
            visitor.visitOperation(line, column, tokenId);
        }
        SelectionSet()) |
        (
            operationType = OperationType() (name = Name())? {
                OperationType opType = OperationType.byValue(operationType.image);
                visitor.visitOperation(line, column, tokenId, opType, name != null? name.image : null);
            }
            (VariableDefinitions())? (Directives())? SelectionSet()
        )
    ) {
        visitor.endOperation(tokenId);
    }
}

void VariableDefinitions(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitVariableDefinitions(line, column, tokenId);
}
{
    <OPAR> (VariableDefinition())+ <CPAR> {
        visitor.endVariableDefinitions(tokenId);
    }
}

void VariableDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitVariableDefinition(line, column, tokenId);
}
{
    Variable() <COLON> Type() (DefaultValue())? {
        visitor.endVariableDefinition(tokenId);
    }
}

void Variable(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    <DOLLAR> name = Name() {
        visitor.visitVariable(line, column, tokenId, "$" + name.image);
    }
}

void DefaultValue(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitDefaultValue(line, column, tokenId);
}
{
    <EQ> Value() {
        visitor.endDefaultValue(tokenId);
    }
}




// Operations
void SelectionSet(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitSelectionSet(line, column, tokenId);
}
{
    <OCBR> (Selection())+ <CCBR> {
        visitor.endSelectionSet(tokenId);
    }
}

void Selection(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    (name = Name() (
        FieldWithAlias(name, line, column, tokenId) |
        Field(name, line, column, tokenId)
    )) |
    (<ELLIPSIS> (
        FragmentSpread(line, column, tokenId) |
        InlineFragment(line, column, tokenId)
    ))
}

void Field(Token name, int line, int column, int tokenId): {
    visitor.visitField(line, column, tokenId, name.image);
}
{
    (Arguments())? (Directives())? (SelectionSet())? {
        visitor.endField(tokenId);
    }
}

void FieldWithAlias(Token alias, int line, int column, int tokenId): {
    Token name;
}
{
    <COLON> name = Name() {
        visitor.visitField(line, column, tokenId, name.image, alias.image);
    }
    (Arguments())? (Directives())? (SelectionSet())? {
        visitor.endField(tokenId);
    }
}

void Arguments(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitArguments(line, column, tokenId);
}
{
    <OPAR> (Argument())+ <CPAR> {
        visitor.endArguments(tokenId);
    }
}

void Argument(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    name = Name() {
        visitor.visitArgument(line, column, tokenId, name.image);
    }
    <COLON> ValueWithVariable() {
        visitor.endArgument(tokenId);
    }
}




// Fragments
void FragmentSpread(int line, int column, int tokenId): {
    Token name;
}
{
    name = FragmentName() {
        visitor.visitFragmentSpread(line, column, tokenId, name.image);
    }
    (Directives())? {
        visitor.endFragmentSpread(tokenId);
    }
}

void InlineFragment(int line, int column, int tokenId): {
    Token type = null;
}
{
    (type = TypeCondition())? {
        visitor.visitInlineFragment(line, column, tokenId, type.image);
    }
    (Directives())? SelectionSet() {
        visitor.endInlineFragment(tokenId);
    }
}

void FragmentDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
    Token type;
}
{
    <FRAGMENT> name = FragmentName() type = TypeCondition() {
        visitor.visitFragmentDefinition(line, column, tokenId, name.image, type.image);
    }
    (Directives())? SelectionSet() {
        visitor.endFragmentDefinition(tokenId);
    }
}

Token FragmentName(): {
    Token name;
}
{
    (name = Name())
    {
        if ("on".equals(name.image)) throw new ParseException("on is not allowed at a name");
        return name;
    }
}

Token TypeCondition(): {
    Token name;
}
{
    <ON> name = TypeName() {
        return name;
    }
}




// Values
Token Name(): {
    Token t;
}
{
    (
        t = <NAME_LITERAL> |
        t = <FRAGMENT> |
        t = <QUERY> |
        t = <MUTATION> |
        t = <SCHEMA> |
        t = <SCALAR> |
        t = <TYPE> |
        t = <INTERFACE> |
        t = <IMPLEMENTS> |
        t = <ENUM> |
        t = <UNION> |
        t = <INPUT> |
        t = <EXTEND> |
        t = <DIRECTIVE>
    )
    {
        return t;
    }

}

void Value(): {}
{
      IntValue()
    | FloatValue()
    | StringValue()
    | BooleanValue()
    | EnumValue()
    | ListValue()
    | ObjectValue()
}

void ValueWithVariable(): {}
{
      Variable()
    | IntValue()
    | FloatValue()
    | StringValue()
    | BooleanValue()
    | EnumValue()
    | ListValueWithVariable()
    | ObjectValueWithVariable()
}

void EnumValue(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name = null;
}
{
    name = Name() {
        if ("true".equals(name.image)
              || "false".equals(name.image)
              || "null".equals(name.image)) throw new ParseException("true, false, null are not allowed as names");

        visitor.visitEnumLiteral(line, column, tokenId, name.image);
    }
}




// List Value
void ListValue(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitListValue(line, column, tokenId);
}
{
    <OBRA> (Value())* <CBRA> {
        visitor.endListValue(tokenId);
    }
}

void ListValueWithVariable(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitListValue(line, column, tokenId);
}
{
    <OBRA> (ValueWithVariable())* <CBRA> {
        visitor.endListValue(tokenId);
    }
}




// Object Value
void ObjectValue(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitObjectValue(line, column, tokenId);
}
{
    <OCBR> (ObjectField())* <CCBR> {
        visitor.endObjectValue(tokenId);
    }
}

void ObjectValueWithVariable(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitObjectValue(line, column, tokenId);
}
{
    <OCBR> (ObjectFieldWithValue())* <CCBR> {
        visitor.endObjectValue(tokenId);
    }
}

void ObjectField(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    name = Name() {
        visitor.visitObjectField(line, column, tokenId, name.image);
    }
    <COLON> Value() {
        visitor.endObjectField(tokenId);
    }
}

void ObjectFieldWithValue(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    name = Name() {
        visitor.visitObjectField(line, column, tokenId, name.image);
    }
    <COLON> ValueWithVariable() {
        visitor.endObjectField(tokenId);
    }
}




// Directives
void Directives(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitDirectives(line, column, tokenId);
}
{
    <AT> Directive() (<AT> Directive())* {
        visitor.endDirectives(tokenId);
    }
}

void Directive(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    name = Name() {
        visitor.visitDirective(line, column, tokenId, name.image);
    }
    (Arguments())? {
        visitor.endDirective(tokenId);
    }
}




// Types
void Type(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token typeName = null;
    Token bang = null;
}
{
    (
        typeName = TypeName() (bang = <BANG>)? {
            visitor.visitType(line, column, tokenId, typeName.image, bang == null ? true : false);
        } |
        ListType()
    )

}

Token TypeName(): {
    Token t;
}
{
    t = Name() {
        return t;
    }
}

void ListType(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token bang = null;
    visitor.visitListType(line, column, tokenId);
}
{
    <OBRA> Type() <CBRA> (bang = <BANG>)? {
        visitor.endListType(tokenId, bang == null ? true : false);
    }
}




// Type System
void TypeSystemDefinition(): {}
{
    SchemaDefinition() |
    TypeDefinition() |
    TypeExtensionDefinition() |
    DirectiveDefinition()
}

void SchemaDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitSchemaDefinition(line, column, tokenId);
}
{
    <SCHEMA> (Directives())? <OCBR> (OperationTypeDefinition())+ <CCBR> {
        visitor.endSchemaDefinition(tokenId);
    }
}

void OperationTypeDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token operationType;
    Token typeName;
}
{
    operationType = OperationType() <COLON> typeName = TypeName() {
        OperationType opType = OperationType.byValue(operationType.image);
        visitor.visitOperationTypeDefinition(line, column, tokenId, opType, typeName.image);
    }
}

void TypeDefinition(): {}
{
    ScalarTypeDefinition() |
    ObjectTypeDefinition() |
    InterfaceTypeDefinition() |
    UnionTypeDefinition() |
    EnumTypeDefinition() |
    InputObjectTypeDefinition()
}

void ScalarTypeDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    <SCALAR> name = Name() {
        visitor.visitScalarTypeDefinition(line, column, tokenId, name.image);
    }
    (Directives())? {
        visitor.endScalarTypeDefinition(tokenId);
    }
}

void ObjectTypeDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    <TYPE> name = Name() {
        visitor.visitObjectTypeDefinition(line, column, tokenId, name.image);
    }
    (ImplementsInterface())? (Directives())? <OCBR> (FieldDefinition())+ <CCBR> {
        visitor.endObjectTypeDefinition(tokenId);
    }
}

void ImplementsInterface(): {}
{
    <IMPLEMENTS> ({
        int tokenId = tokenId();
        int line = line();
        int column = column();
        Token typeName;
    } typeName = TypeName() {
        visitor.visitImplementsType(line, column, tokenId, typeName.image);
    })+
}

void FieldDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    name = Name() {
        visitor.visitFieldDefinition(line, column, tokenId, name.image);
    }
    (ArgumentsDefinition())? <COLON> Type() (Directives())? {
        visitor.endFieldDefinition(tokenId);
    }
}

void ArgumentsDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitArgumentsDefinition(line, column, tokenId);
}
{
    <OPAR> (InputValueDefinition())+ <CPAR> {
        visitor.endArgumentsDefinition(tokenId);
    }
}

void InputValueDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    name = Name() {
        visitor.visitInputValueDefinition(line, column, tokenId, name.image);
    }
    <COLON> Type() (DefaultValue())? (Directives())? {
        visitor.endInputValueDefinition(tokenId);
    }
}

void InterfaceTypeDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    <INTERFACE> name = Name() {
        visitor.visitInterfaceTypeDefinition(line, column, tokenId, name.image);
    }
    (Directives())? <OCBR> (FieldDefinition())+ <CCBR> {
        visitor.endInterfaceTypeDefinition(tokenId);
    }
}

void UnionTypeDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    <UNION> name = Name() {
        visitor.visitUnionTypeDefinition(line, column, tokenId, name.image);
    }
    (Directives())? <EQ> UnionMembers() {
        visitor.endUnionTypeDefinition(tokenId);
    }
}

void UnionMembers(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token typeName;
}
{
    typeName = TypeName() {
        visitor.visitUnionMember(line, column, tokenId, typeName.image);
    }
    (<PIPE> {
        tokenId = tokenId();
        line = line();
        column = column();
    } typeName = TypeName() {
        visitor.visitUnionMember(line, column, tokenId, typeName.image);
    })*
}

void EnumTypeDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    <ENUM> name = Name() {
        visitor.visitEnumTypeDefinition(line, column, tokenId, name.image);
    }
    (Directives())? <OCBR> (EnumValueDefinition())+ <CCBR> {
        visitor.endEnumTypeDefinition(tokenId);
    }
}

void EnumValueDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitEnumValueDefinition(line, column, tokenId);
}
{
    EnumValue() (Directives())? {
        visitor.endEnumValueDefinition(tokenId);
    }
}

void InputObjectTypeDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    <INPUT> name = Name() {
        visitor.visitInputObjectTypeDefinition(line, column, tokenId, name.image);
    }
    (Directives())? <OCBR> (InputValueDefinition())+ <CCBR> {
        visitor.endInputObjectTypeDefinition(tokenId);
    }
}

void TypeExtensionDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitTypeExtensionDefinition(line, column, tokenId);
}
{
    <EXTEND> ObjectTypeDefinition() {
        visitor.endTypeExtensionDefinition(tokenId);
    }
}

void DirectiveDefinition(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    <DIRECTIVE> <AT> name = Name() {
        visitor.visitDirectiveDefinition(line, column, tokenId, name.image);
    }
    (ArgumentsDefinition())? <ON> DirectiveLocations() {
        visitor.endDirectiveDefinition(tokenId);
    }
}

void DirectiveLocation(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token name;
}
{
    name = Name() {
        visitor.visitDirectiveLocation(line, column, tokenId, name.image);
    }
}

void DirectiveLocations(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    visitor.visitDirectiveLocations(line, column, tokenId);
}
{
    DirectiveLocation() (<PIPE> {
        tokenId = tokenId();
        line = line();
        column = column();
    }
    DirectiveLocation())* {
        visitor.endDirectiveLocations(tokenId);
    }
}




// Tokens
void BooleanValue(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token literal;
}
{
    (
        literal = <TRUE> |
        literal = <FALSE>
    )
    {
        visitor.visitBooleanLiteral(line, column, tokenId, literal.image);
    }
}

void IntValue(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token t;
}
{
    t = <INTEGER_LITERAL> {
        try {
            int literal = Integer.parseInt(t.image);
            visitor.visitIntLiteral(line, column, tokenId, literal);
        } catch (NumberFormatException e) {
            throw new ParseException("Cannot convert '" + t.image + "' to int");
        }
    }
}

void FloatValue(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token t;
}
{
    t = <FLOAT_LITERAL> {
        try {
            double literal = Double.parseDouble(t.image);
            visitor.visitFloatLiteral(line, column, tokenId, literal);
        } catch (NumberFormatException e) {
            throw new ParseException("Cannot convert '" + t.image + "' to double");
        }
    }
}

void StringValue(): {
    int tokenId = tokenId();
    int line = line();
    int column = column();
    Token literal;
}
{
    literal = <STRING_LITERAL> {
        visitor.visitStringLiteral(line, column, tokenId, literal.image);
    }
}

Token OperationType(): {
    Token t;
}
{
    (
        t = <MUTATION> |
        t = <QUERY>
    )
    {
        return t;
    }
}
